# Identity Center instance details
output "instance_arn" {
  description = "ARN of the IAM Identity Center instance"
  value       = local.identity_center_instance_arn
}

output "identity_store_id" {
  description = "ID of the Identity Store"
  value       = local.identity_center_identity_store_id
}

# Access portal URL (constructed from instance ARN)
output "access_portal_url" {
  description = "AWS access portal sign-in URL"
  value       = "https://${regex("sso-instance/([a-zA-Z0-9-]+)", local.identity_center_instance_arn)[0]}.awsapps.com/start"
}

# SAML metadata URL (constructed from region and instance)
output "saml_metadata_url" {
  description = "SAML metadata URL for service provider"
  value       = "https://${var.region}.signin.aws.amazon.com/platform/saml/${regex("sso-instance/([a-zA-Z0-9-]+)", local.identity_center_instance_arn)[0]}"
}

# Sign-in URL
output "signin_url" {
  description = "AWS access portal sign-in URL"
  value       = "https://${regex("sso-instance/([a-zA-Z0-9-]+)", local.identity_center_instance_arn)[0]}.awsapps.com/start"
}

# SCIM endpoint (placeholder - actual endpoint needs to be retrieved via API)
output "scim_endpoint" {
  description = "SCIM endpoint for provisioning (placeholder)"
  value       = "https://scim.${var.region}.amazonaws.com/${regex("sso-instance/([a-zA-Z0-9-]+)", local.identity_center_instance_arn)[0]}/scim/v2"
}

# SCIM access token (sensitive - will be generated by Python script)
output "scim_access_token" {
  description = "SCIM access token (placeholder - generated by Python script)"
  value       = "placeholder-token-generated-by-python-script"
  sensitive   = true
}

# Permission sets
output "regional_admin_permission_set_arn" {
  description = "ARN of the RegionalAdmin permission set"
  value       = aws_ssoadmin_permission_set.regional_admin.arn
}

output "administrator_permission_set_arn" {
  description = "ARN of the AdministratorAccess permission set"  
  value       = aws_ssoadmin_permission_set.administrator_access.arn
}

# Test users
output "test_user_ids" {
  description = "Map of test user names to their Identity Store user IDs"
  value       = { for username, user in aws_identitystore_user.test_users : username => user.user_id }
}

# Configuration status
output "configuration_status" {
  description = "Status of Identity Center configuration"
  value = {
    environment                = var.environment
    region                    = var.region
    identity_center_configured = true
    users_created             = length(var.test_users)
    permission_sets_created   = 2
    scim_enabled             = var.enable_scim
    manual_steps_required = [
      "Configure external identity provider via Python script",
      "Enable SCIM provisioning via Python script",
      "Download SAML metadata file",
      "Test authentication flow"
    ]
  }
}