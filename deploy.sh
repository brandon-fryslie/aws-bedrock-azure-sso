#!/bin/bash
set -e

# AWS Bedrock Azure SSO Deployment Script
# Automates the complete deployment process

echo "=== AWS Bedrock Azure SSO Deployment ==="
echo ""

# Check prerequisites
echo "Checking prerequisites..."

# Check Terraform
if ! command -v terraform &> /dev/null; then
    echo "ERROR: Terraform is required but not installed"
    exit 1
fi

# Check Python
if ! command -v python3 &> /dev/null; then
    echo "ERROR: Python 3 is required but not installed"
    exit 1
fi

# Check AWS CLI
if ! command -v aws &> /dev/null; then
    echo "ERROR: AWS CLI is required but not installed"
    exit 1
fi

# Check Azure CLI
if ! command -v az &> /dev/null; then
    echo "ERROR: Azure CLI is required but not installed"
    exit 1
fi

echo "âœ“ Prerequisites check passed"
echo ""

# Check AWS profiles
echo "Checking AWS profiles..."
if ! aws configure list-profiles | grep -q "aws-commercial"; then
    echo "ERROR: AWS profile 'aws-commercial' not found"
    echo "Please configure: aws configure --profile aws-commercial"
    exit 1
fi

if ! aws configure list-profiles | grep -q "aws-govcloud"; then
    echo "ERROR: AWS profile 'aws-govcloud' not found"
    echo "Please configure: aws configure --profile aws-govcloud"
    exit 1
fi

echo "âœ“ AWS profiles check passed"
echo ""

# Check terraform.tfvars
if [ ! -f "terraform.tfvars" ]; then
    echo "ERROR: terraform.tfvars file not found"
    echo "Please create terraform.tfvars based on terraform.tfvars.example"
    exit 1
fi

echo "âœ“ Configuration file check passed"
echo ""

# Phase 1: Terraform Deployment
echo "=== Phase 1: Terraform Infrastructure Deployment ==="
echo ""

echo "Initializing Terraform..."
terraform init

echo ""
echo "Planning Terraform deployment..."
terraform plan

echo ""
read -p "Do you want to proceed with Terraform deployment? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled"
    exit 1
fi

echo "Applying Terraform configuration..."
terraform apply -auto-approve

echo "Exporting Terraform outputs..."
terraform output -json > terraform_outputs.json

echo "âœ“ Terraform deployment completed"
echo ""

# Phase 2: Python Script Configuration
echo "=== Phase 2: SAML and SCIM Configuration ==="
echo ""

echo "Installing Python dependencies..."
pip install -r scripts/requirements.txt

echo ""
echo "Running SAML and SCIM configuration script..."
cd scripts
python3 configure_saml_scim.py --config ../terraform_outputs.json --action setup

echo "âœ“ Automated configuration completed"
echo ""

# Phase 3: Manual Steps Information
echo "=== Phase 3: Manual Configuration Required ==="
echo ""
echo "The following manual steps must be completed:"
echo ""
echo "1. Azure Entra Admin Center Configuration:"
echo "   - Navigate to https://entra.microsoft.com/"
echo "   - Configure SAML SSO settings for AWS enterprise applications"
echo "   - Upload SAML metadata files (generated by script)"
echo "   - Enable and configure SCIM provisioning"
echo ""
echo "2. Test the Integration:"
echo "   - Navigate to https://myaccount.microsoft.com/"
echo "   - Sign in with test user credentials"
echo "   - Access AWS IAM Identity Center applications"
echo ""
echo "3. Run validation tests:"
echo "   python3 configure_saml_scim.py --config ../terraform_outputs.json --action test"
echo ""

echo "=== Deployment Summary ==="
echo ""
echo "âœ“ AWS IAM Identity Center configured in both Commercial and GovCloud"
echo "âœ“ Azure Entra ID enterprise applications created"
echo "âœ“ Test users created in both systems"
echo "âœ“ Permission sets and account assignments configured"
echo "âœ“ SCIM provisioning templates generated"
echo ""
echo "ðŸ“‹ Next Steps:"
echo "1. Complete manual Azure configuration steps"
echo "2. Test SAML authentication flows"
echo "3. Verify SCIM user synchronization"
echo "4. Run validation tests"
echo ""
echo "ðŸ“š Documentation: See DEPLOYMENT.md for detailed instructions"
echo "ðŸ”§ Configuration files: Check generated *.json files for manual steps"
echo ""
echo "Deployment completed successfully!"